package newgen

import (
	"math/big"
)

// GENERATED BY CODEGEN.

/* Models represents a row from models. */
type Models struct {
	ID      int    `json:"ID" db:"id"`
	Name    string `json:"NAME" db:"name"`
	Title   string `json:"title" db:"title"`
	Fax     string `json:"fax" db:"fax"`
	Web     string `json:"web" db:"web"`
	Age     int    `json:"age" db:"age"`
	Right   bool   `json:"right" db:"right"`
	Counter int64  `json:"counter" db:"counter"`
}

/* ModelsPartial is used for updating specific columns from models. */
type ModelsPartial struct {
	Models
	Touched big.Int
}

func (p *ModelsPartial) SetID(param int) {
	p.ID = param
	p.Touched.SetBit(&p.Touched, Models_ID, 1)
}

func (p *ModelsPartial) SetName(param string) {
	p.Name = param
	p.Touched.SetBit(&p.Touched, Models_Name, 1)
}

func (p *ModelsPartial) SetTitle(param string) {
	p.Title = param
	p.Touched.SetBit(&p.Touched, Models_Title, 1)
}

func (p *ModelsPartial) SetFax(param string) {
	p.Fax = param
	p.Touched.SetBit(&p.Touched, Models_Fax, 1)
}

func (p *ModelsPartial) SetWeb(param string) {
	p.Web = param
	p.Touched.SetBit(&p.Touched, Models_Web, 1)
}

func (p *ModelsPartial) SetAge(param int) {
	p.Age = param
	p.Touched.SetBit(&p.Touched, Models_Age, 1)
}

func (p *ModelsPartial) SetRight(param bool) {
	p.Right = param
	p.Touched.SetBit(&p.Touched, Models_Right, 1)
}

func (p *ModelsPartial) SetCounter(param int64) {
	p.Counter = param
	p.Touched.SetBit(&p.Touched, Models_Counter, 1)
}

// ^^ END OF GENERATED BY CODEGEN. ^^
