package {{ .Conf.RootPackage }}

import (
	"fmt"
	"math/big"
)

// GENERATED BY CODEGEN.

{{ range $schema := .Conf.Schemas }}
	{{ range $table := $schema.Tables }}
    {{- if $table.Generate}}
	/* {{ $table.Title }} represents a row from {{ $table.Name }}. */
type {{ $table.Title }} struct {
	{{ range $field := $table.Fields -}}
	{{ $field.Title }} {{ if $field.IsNullable }}*{{ end }}{{ $field.GoType }} `json:"{{ $field.Name }}" db:"{{ lower $field.Name }}"`
	{{ end -}}

	{{- range $fk := $table.ForeignKeys }}
	{{ $fk.CustomName }} {{ if not $fk.IsUnique }}[]{{ end }}*{{ $fk.RefTableTitle }} `json:"{{ lower $fk.CustomName }},omitempty"`
	{{- end }}
}

	{{ if $table.Audit }}
func ({{ $table.Initials }} {{ $table.Title }})Diff(other {{ $table.Title }}) []Change {
	changes := []Change{}

	{{ range $field := $table.Fields -}}
		{{- if not $field.IsPrimaryKey }}
	if {{ $table.Initials }}.{{ $field.Title }} != other.{{ $field.Title}} {
		changes = append(changes, Change{ 
			Field: "{{ lower $field.Name }}", 
			OldValue: fmt.Sprintf("%v", other.{{ $field.Title }}), 
			NewValue: fmt.Sprintf("%v", {{ $table.Initials }}.{{ $field.Title }}),
		})
	}	
		{{ end -}}
	{{ end -}}
	return changes
}

func ({{ $table.Initials }} {{ $table.Title }})Apply(other *{{ $table.Title }}) {
	panic("not implemented")
}

func ({{ $table.Initials }} {{ $table.Title }})Key() int64 {
	return {{ $table.Initials }}.UuID
}
	{{ end }}
	{{ end }}
	{{ end }}
{{ end }}

{{/* Partial data type */}}
{{ range $schema := .Conf.Schemas }}
	{{ range $table := $schema.Tables }}
    {{- if $table.Generate}}
	/* {{ $table.Title }}Partial is used for updating specific columns from {{ $table.Name }}. */
type {{ $table.Title }}Partial struct {
	{{ $table.Title }}
	Touched big.Int
}
	{{ range $field := $table.Fields }}
func (p *{{ $table.Title }}Partial) Set{{ $field.Title }}(param {{ if $field.IsNullable }}*{{ end }}{{ $field.GoType }}) {
	p.{{ $field.Title }} = param
	p.Touched.SetBit(&p.Touched, {{ $table.Title }}_{{ $field.Title }}, 1)
}
	{{- end }}
	{{ if $table.Audit }}
func ({{ $table.Initials }} {{ $table.Title }}Partial)Diff(other {{ $table.Title }}) []Change {
	changes := []Change{}

	{{ range $field := $table.Fields -}}
		{{ if not $field.IsPrimaryKey }}
	if {{ $table.Initials }}.Touched.Bit({{ $table.Title }}_{{ $field.Title }}) == 1 {
		if {{ $table.Initials }}.{{ $field.Title }} != other.{{ $field.Title}} {
			changes = append(changes, Change{ Field: "{{ lower $field.Name }}", OldValue: fmt.Sprintf("%v", other.{{ $field.Title }}), NewValue: fmt.Sprintf("%v", {{ $table.Initials }}.{{ $field.Title }})})
		}
	}
		{{ end -}}
	{{ end -}}

	return changes
}

func ({{ $table.Initials }} {{ $table.Title }}Partial)Apply(other *{{ $table.Title }}) {
	{{ range $field := $table.Fields -}}
		{{ if not (or $field.IsPrimaryKey $field.NoAudit) }}
	if {{ $table.Initials }}.Touched.Bit({{ $table.Title }}_{{ $field.Title }}) == 1 {
		other.{{ $field.Title }} = {{ $table.Initials }}.{{ $field.Title }}
	}
		{{ end -}}
	{{ end -}}
}

func ({{ $table.Initials }} {{ $table.Title }}Partial)Key() int64 {
	return {{ $table.Initials }}.UuID
}
	{{- end -}}
	{{- end -}}
	{{- end -}}
{{- end }}

// ^^ END OF GENERATED BY CODEGEN. ^^

