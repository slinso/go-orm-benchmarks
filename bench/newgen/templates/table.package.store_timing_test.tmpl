package {{ .Conf.Package }}


import (
	"testing"

	{{ .Conf.RootPackage }} "{{ .Conf.RootPackageInclude }}"
	
	"github.com/seambiz/seambiz/stime"
	"github.com/seambiz/seambiz/sdb"
	"github.com/DATA-DOG/go-sqlmock"
	"github.com/brianvoe/gofakeit/v5"
)

// GENERATED BY CODEGEN. 

{{- $conf := .Conf -}}
{{- $table := .Table -}}
{{- $schema := .Schema }}

func Benchmark{{ $table.Title }}Insert(b *testing.B) {
	b.ReportAllocs()
	ctx := &{{ $conf.RootPackage }}.Context{Log:&zerolog.Logger{}}

	db, err := insertQuery()
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &{{ .Conf.RootPackage }}.{{  $table.Title }}{}
	{{- if $schema.IsMultiTenant }}
	store := New{{ $table.Title }}Store(0, db)
	{{- else }}
	store := New{{ $table.Title }}Store(ctx, db)
	{{- end }}

	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			err := store.Insert(data)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

func Benchmark{{ $table.Title }}Update(b *testing.B) {
	b.ReportAllocs()
	ctx := &{{ $conf.RootPackage }}.Context{Log:&zerolog.Logger{}}

	db, err := insertQuery()
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &{{ .Conf.RootPackage }}.{{  $table.Title }}{}
	{{- if $schema.IsMultiTenant }}
	store := New{{ $table.Title }}Store(0, db)
	{{- else }}
	store := New{{ $table.Title }}Store(ctx, db)
	{{- end }}

	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			_, err := store.Update(data)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}

{{- if gt (len $table.PkFields) 0 }}
func Benchmark{{ $table.Title }}Delete(b *testing.B) {
	b.ReportAllocs()
	ctx := &{{ $conf.RootPackage }}.Context{Log:&zerolog.Logger{}}

	db, err := insertQuery()
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &{{ .Conf.RootPackage }}.{{  $table.Title }}{}
	{{- if $schema.IsMultiTenant }}
	store := New{{ $table.Title }}Store(0, db)
	{{- else }}
	store := New{{ $table.Title }}Store(ctx, db)
	{{- end }}

	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			_, err := store.Delete(data)
			if err != nil {
				b.Fatal(err)
			}
		}
	})
}
{{ end }}

func Benchmark{{ $table.Title }}SelectAll(b *testing.B) {
	b.ReportAllocs()
	ctx := &{{ $conf.RootPackage }}.Context{Log:&zerolog.Logger{}}

	db, err := selectQuery({{ lower .Table.Title }}QueryFieldsAll)
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &{{ .Conf.RootPackage }}.{{  $table.Title }}{}
	gofakeit.Struct(data)
	for i := 0; i < 100; i++ {
		addResultRowDSN("bench", []driver.Value{
			{{- range $i, $field := $table.Fields }}
				{{- if gt $i 0 }}, {{ end -}}
				{{- if $field.IsNullable -}}
					*data.{{ $field.Title }}
				{{- else -}}
					data.{{ $field.Title }}
				{{- end -}}
			{{ end -}}
		})
	}

	{{- if $schema.IsMultiTenant }}
	store := New{{ $table.Title }}Store(0, db)
	{{- else }}
	store := New{{ $table.Title }}Store(ctx, db)
	{{- end }}

	for i := 0; i < b.N; i++ {
		_, err = store.Query()
		if err != nil {
			b.Fatal(err)
		}
	}
}

func Benchmark{{ $table.Title }}SelectCols(b *testing.B) {
	b.ReportAllocs()
	ctx := &{{ $conf.RootPackage }}.Context{Log:&zerolog.Logger{}}


	db, err := selectQuery({{ lower .Table.Title }}QueryFieldsAll)
	if err != nil {
		b.Fatal(err)
	}
	defer db.Close()

	data := &{{ .Conf.RootPackage }}.{{  $table.Title }}{}
	gofakeit.Struct(data)
	for i := 0; i < 100; i++ {
		{{- $first := first $table.Fields -}}
		{{- $last := last $table.Fields -}}
		addResultRowDSN("bench", []driver.Value{
			{{- if $first.IsNullable -}}
				*data.{{ $first.Title }}
			{{- else -}}
				data.{{ $first.Title }}
			{{- end -}}
			{{`, `}}
			{{- if $last.IsNullable -}}
				*data.{{ $last.Title }}
			{{- else -}}
				data.{{ $last.Title }}
			{{- end -}}
		})
	}

	{{- if $schema.IsMultiTenant }}
	store := New{{ $table.Title }}Store(0, db)
	{{- else }}
	store := New{{ $table.Title }}Store(ctx, db)
	{{- end -}}
	.Columns({{ $conf.RootPackage }}.{{ $table.Title }}_{{ $first.Title }}, {{ $conf.RootPackage }}.{{ $table.Title }}_{{ $last.Title }})

	for i := 0; i < b.N; i++ {
		_, err = store.Query()
		if err != nil {
			b.Fatal(err)
		}
	}
}



// ^^ END OF GENERATED BY CODEGEN. ^^
