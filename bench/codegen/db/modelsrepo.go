package db

import (
	"database/sql"

	"github.com/efectn/go-orm-benchmarks/bench/codegen/db/mysql"
	codegen "github.com/efectn/go-orm-benchmarks/codegen"
)

// GENERATED BY CODEGEN.

/* ModelsRepo implements ModelsRepository interface definition. */
type ModelsRepo struct {
	conn *sql.DB
}

func NewModelsRepo(conn *sql.DB) codegen.ModelsRepository {
	return &ModelsRepo{
		conn: conn,
	}
}

func (r ModelsRepo) Create(ctx *codegen.Context, data *codegen.Models) error {
	return mysql.NewModelsStore(ctx, r.conn).Insert(data)
}

func (r ModelsRepo) Update(ctx *codegen.Context, data *codegen.Models) error {
	_, err := mysql.NewModelsStore(ctx, r.conn).Update(data)
	return err
}

func (r ModelsRepo) UpdatePartial(ctx *codegen.Context, data *codegen.ModelsPartial) error {
	_, err := mysql.NewModelsStore(ctx, r.conn).SetBits(&data.Touched).Update(&data.Models)
	return err
}

func (r ModelsRepo) Delete(ctx *codegen.Context, data *codegen.Models) error {
	_, err := mysql.NewModelsStore(ctx, r.conn).Delete(data)
	return err
}

func (r ModelsRepo) OneByID(ctx *codegen.Context, id int) (*codegen.Models, error) {
	return mysql.NewModelsStore(ctx, r.conn).OneByID(id)
}

// ^^ END OF GENERATED BY CODEGEN. ^^
